.title Kernel traps demo

.include macros.m11h

kbs = 177560            ; keyboard status register
kbd = 177562            ; keyboard data buffer
tts = 177564            ; terminal status register
ttd = 177566            ; terminal data buffer
CR = 15
LF = 12
ESC = 33

psw = 177776            ; processor status word
mmr0 = 177572           ; memory management register 0, aka SSR0
mmr3 = 172516           ; memory management register 1, aka SSR3

upar = 177640           ; base user page address register
updr = 177600           ; base user page data register
kpar = 172340           ; base kernel page address register
kpdr = 172300           ; base kernel page data register

pdr.nr = 0              ; non-resident
pdr.rw = 77406          ; page size + read-write flag
pdr.ro = 77404          ; page size + read-only flag

trapv = 34

stack = 160000


; Virtual address pages
; page 0: 000000 - 017777  (r0)
; page 1: 020000 - 037777 2(r0)
; page 2: 040000 - 057777 4
; page 3: 060000 - 077777 6
; page 4: 100000 - 117777 10
; page 5: 120000 - 137777 12
; page 6: 140000 - 157777 14
; page 7: 160000 - 177777 16


.asect
.=20000                     ; the beginning of page 1
start:
    mov #stack, sp          ; initialize kernel stack pointer
    mov #ktrap, @#trapv     ; set up the kernel trap handler

    bic #100, @#kbs         ; disable keyboard interrupts (just in case)
    bic #100, @#tts         ; disable terminal interrupts (just in case)

    jsr r5, kprint          ; clear the screen
    .word cls

    jsr r5, bzero           ; zero out the page table
    .word kpar
    .word 10

    jsr r5, bzero
    .word kpdr
    .word 10

    mov #kpar, r0           ; set up kernel page table
    mov #kpdr, r1

    mov #0, (r0)            ; page 0 (low memory): kernel and interrupt vectors, mapped 1:1
    mov #pdr.rw, (r1)

    mov #200, 2(r0)         ; page 1: mapped 1:1 (where this code lives)
    mov #pdr.ro, 2(r1)

    mov #400, 14(r0)        ; page 6: stack location (the page below 160000) mapped to physical address 40000
    mov #pdr.rw, 14(r1)

    mov #177600, 16(r0)     ; page 7 (high memory): peripherals and processor registers 
                            ; mapped 1:1 in the sense of highest virtual page => highest physical page
                            ; concretely, virtual address 160000 is mapped to physical address 17760000 (22-bit address)
    mov #pdr.rw, 16(r1)


    jsr r5, bzero           ; zero out the page table
    .word upar
    .word 10

    jsr r5, bzero
    .word updr
    .word 10

    mov #upar, r0           ; set up user page table
    mov #updr, r1

                            ; page 0: not mapped!

    mov #200, 2(r0)         ; page 1: mapped 1:1 (where this code lives)
    mov #pdr.ro, 2(r1)

    mov #600, 16(r0)        ; page 7: stack location at the very top of memory, mapped to physical address 60000
    mov #pdr.rw, 16(r1)
                            ; NB: the user does not have direct access to peripherals,
                            ; will have to access them through kernel traps



    mov #20, @#mmr3         ; enable 22-bit addressing
    inc @#mmr0              ; enable virtual memory

    bis #140000, @#psw      ; set user mode
    clr sp                  ; initialize user stack pointer to 0
                            ; what??
                            ; the stack pointer is pre-decremented, so it will underflow!
                            ; => the first stack item will get stored at 177776
                            ; also NB: the kernel and user have different stack pointer registers!

    jsr pc, userprog        ; jump to the user program

    trap 0                  ; exit, in case the user didn't

    halt


;;;
;;; User program
;;;

userprog:
    jsr r5, uprint          ; "Hello, what is your name?"
    .word msg1

    jsr r5, input
    .word buf

    jsr r5, uprint          ; "Hi, "
    .word msg2

    jsr r5, uprint          ; <name>
    .word buf

    jsr r5, uprint          ; ", nice to meet you!"
    .word msg3

    trap 0                  ; exit


buf:
.=.+64


;;;
;;; Kernel-mode print routine: use terminal register directly
;;;

kprint:
    mov (r5)+, r1       ; address of the string immediately follows old pc, which is now in r5
1$:
    movb (r1)+, @#ttd   ; send the next character
    beq 3$              ; check if we found a zero byte
2$:
    tstb @#tts          ; wait until character transmitted
    bpl 2$
    br 1$
3$:
    rts r5              ; return


;;;
;;; User-mode print routine: use a kernel trap to send a character to the terminal
;;;

uprint:
    mov (r5)+, r1       ; address of the buffer to print in r1
1$:
    movb (r1)+, r0
    beq 2$              ; check if we found a 0 byte
    trap 2              ; write the character found in r0 to the terminal
    br 1$
2$:
    rts r5              ; return


;;;
;;; User-mode input route: use a kernel trap to read a character from the keyboard
;;;

input:
    mov (r5)+, r1       ; address of the buffer to read data into in r1
1$:
    trap 1              ; read a character into r0
    cmpb r0, #CR        ; user pressed enter?
    beq 2$
    movb r0, (r1)+      ; copy it to the buffer
    br 1$
2$:
    movb #0, (r1)       ; null-terminate the input
    rts r5


;;;
;;; Kernel traps
;;;

ktrap:
    push r2
    push r3
    mov 4(sp), r2       ; return address in r2
    sub #2, r2          ; subtract 2 to get the trap instruction
    clr r3
    movb (r2), r3       ; get the low byte of the instruction to determine the trap number
    asl r3              ; multiply by 2...
    jmp @ttable(r3)     ; and address into the jump table

ret:
    pop r3
    pop r2
    rti

ttable:
    .word trap.exit     ; trap 0
    .word trap.read     ; trap 1
    .word trap.write    ; trap 2

trap.exit:
    halt                ; halt is a no-op in user mode
    jmp ret

trap.read:
1$:
    tstb @#kbs          ; wait for a character to be ready
    bpl 1$
    movb @#kbd, r0      ; return value in r0
    movb @#kbd, @#ttd   ; also echo it to the terminal
    jmp ret

trap.write:
    movb r0, @#ttd
1$:
    tstb @#tts          ; wait until character transmitted
    bpl 1$
    jmp ret


;;;
;;; Zero out a block of memory
;;; r0: start address
;;; r1: number of words
;;;

bzero:
    mov (r5)+, r0
    mov (r5)+, r1
1$:
    clr (r0)+
    sob r1, 1$
    rts r5


;;;
;;; String constants
;;;

cls:
    .byte <ESC>
    .ascii /[2J/        ; clear screen
    .byte <ESC>
    .asciz /[H/         ; cursor to home

msg1:
    .asciz /Hello, what is your name?/<CR><LF>

msg2:
    .ascii <CR><LF>
    .asciz /Hi, /

msg3:
    .asciz /, nice to meet you!/<CR><LF>

.end
